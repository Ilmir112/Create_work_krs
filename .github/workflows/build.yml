# -*- coding: utf-8 -*-
name: Build PyInstaller
on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8.8'

    - name: Create virtual environment and install dependencies
      run: |
        pip install pyinstaller 
        pip install -r requirements.txt
    - name: Check database secrets
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_WELL_DATA: ${{ secrets.DB_WELL_DATA }}
        DB_NAME_USER: ${{ secrets.DB_NAME_USER }}
        DB_NAME_GNKT: ${{ secrets.DB_NAME_GNKT }}
        DB_CLASSIFICATION: ${{ secrets.DB_CLASSIFICATION }}
      run: |
        $secrets = @(
          @{Name='DB_USER'; Value=$Env:DB_USER},
          @{Name='DB_PASSWORD'; Value=$Env:DB_PASSWORD},
          @{Name='DB_HOST'; Value=$Env:DB_HOST},
          @{Name='DB_WELL_DATA'; Value=$Env:DB_WELL_DATA},
          @{Name='DB_NAME_USER'; Value=$Env:DB_NAME_USER},
          @{Name='DB_NAME_GNKT'; Value=$Env:DB_NAME_GNKT},
          @{Name='DB_CLASSIFICATION'; Value=$Env:DB_CLASSIFICATION}
        )
        

        foreach ($secret in $secrets) {
          if ([string]::IsNullOrEmpty($secret.Value)) {
            Write-Host "Не подгрузилось данные для базы данных: $($secret.Name)"
          } else {
            Write-Host "Данные для базы данных загружены: $($secret.Name)"
          }
        }

    - name: Create .env filea
      run: |
        # Создание .env файла
        Set-Content -Path .env -Value "DB_WELL_DATA=$Env:DB_WELL_DATA"
        Add-Content -Path .env -Value "DB_CLASSIFICATION=$Env:DB_CLASSIFICATION"
        Add-Content -Path .env -Value "DB_NAME_GNKT=$Env:DB_NAME_GNKT"
        Add-Content -Path .env -Value "DB_USER=$Env:DB_USER"
        Add-Content -Path .env -Value "DB_PASSWORD=$Env:DB_PASSWORD"
        Add-Content -Path .env -Value "DB_NAME_USER=$Env:DB_NAME_USER"
        Add-Content -Path .env -Value "DB_HOST=$Env:DB_HOST"
        Add-Content -Path .env -Value "DB_PORT=$Env:DB_PORT"
    
    

#        if (-not [string]::IsNullOrEmpty($secrets.DB_USER)) {
#            Write-Host "Совпадает"
#            }
#        else {
#            Write-Host "Не подгрузилось данные для базы данных"
#        }
          
        

    - name: Build executable
      run: |

        pyinstaller --noconfirm --onedir --icon=imageFiles/icon/zima_ico.ico --console --name "ZIMA" `
          --add-data "work_py;work_py/" `
          --add-data "users;users/" `
          --add-data "tests;tests/" `
          --add-data "log_files;log_files/" `
          --add-data "property_excel;property_excel/" `
          --add-data "imageFiles;imageFiles/" `
          --add-data "gnkt_data;gnkt_data/" `
          --add-data "data_base;data_base/" `
          --add-data "podpisant.json;." `
          --add-data "work_json.py;." `
          --add-data "well_data.py;." `
          --add-data "requirements.txt;." `
          --add-data "plan.py;." `
          --add-data "perforation_correct_gnkt_frez.py;." `
          --add-data "perforation_correct.py;." `
          --add-data "open_pz.py;." `
          --add-data "krs.py;." `
          --add-data "H2S.py;." `
          --add-data "gnkt_opz.py;." `
          --add-data "gnkt_after_grp.py;." `
          --add-data "find.py;." `
          --add-data "data_correct_position_people.py;." `
          --add-data "data_correct.py;." `
          --add-data "cdng.py;." `
          --add-data "category_correct.py;." `
          --add-data "build_script.py;." `
          --add-data "block_name.py;." `
          --add-data "application_pvr.py;." `
          --add-data "application_gis.py;." `
          --add-data ".env;." `
          main.py

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ZIMA
        path: dist/*
