
# -*- coding: utf-8 -*-
name: Build PyInstaller
on:  ['push', 'pull_request']
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.8.8'
#
#      - name: Install PyInstaller
#        run: pip install pyinstaller pywin32
#
#      - name: Install dependencies
#        run: pip install -r requirements.txt

      - name: Create .env file
        env:
          My_APP_ID: ${{ vars.APP-ID }}
          DB_WELL_DATA: ${{ secrets.DB_WELL_DATA }}
          DB_CLASSIFICATION: ${{ secrets.DB_CLASSIFICATION }}
          DB_NAME_GNKT: ${{ secrets.DB_NAME_GNKT }}
          DB_NAME_USER: ${{ secrets.DB_NAME_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          
          # Отладка значений переменных среды
          echo "Secrets is ${{ secrets.DOES_NOT_EXIST }}"
          echo "Secret value: ${{ secrets.MY_SECRET }}"
          echo "DB_WELL_DATA: ${{ secrets.DB_WELL_DATA }}" >> .env
          echo "DB_CLASSIFICATION: ${{ secrets.DB_CLASSIFICATION }}" >> .env
          echo "DB_NAME_GNKT: ${{ secrets.DB_NAME_GNKT }}" >> .env
          echo "DB_NAME_USER: ${{ secrets.DB_NAME_USER }}" >> .env
          echo "DB_USER: ${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD: ${{ secrets.DB_PASSWORD }}" >> .env 
          echo "DB_HOST: ${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT: ${{ secrets.DB_PORT }}" >> .env
          
          if [ "DB_USER" == "postgres" ]
          then
            echo "Расчет корректен"

#        run: |
#            Set-Content -Path .env -Value "DB_WELL_DATA=$($Env:DB_WELL_DATA)"
#            Add-Content -Path .env -Value "DB_CLASSIFICATION=$($Env:DB_CLASSIFICATION)"
#            Add-Content -Path .env -Value "DB_NAME_GNKT=$($Env:DB_NAME_GNKT)"
#            Add-Content -Path .env -Value "DB_USER=$($Env:DB_NAME_USER)"
#            Add-Content -Path .env -Value "DB_PASSWORD=$($Env:DB_PASSWORD)"
#            Add-Content -Path .env -Value "DB_HOST=$($Env:DB_HOST)"
#            Add-Content -Path .env -Value "DB_PORT=$($Env:DB_PORT)"

#      - name: Build executablb
#        run:
#          pyinstaller --noconfirm --onedir --icon=imageFiles/icon/zima_ico.ico --console --name "ZIMA" `
#            --add-data "work_py;work_py/" `
#            --add-data "users;users/" `
#            --add-data "tests;tests/" `
#            --add-data "log_files;log_files/" `
#            --add-data "property_excel;property_excel/" `
#            --add-data "imageFiles;imageFiles/" `
#            --add-data "gnkt_data;gnkt_data/" `
#            --add-data "data_base;data_base/" `
#            --add-data "podpisant.json;." `
#            --add-data "work_json.py;." `
#            --add-data "well_data.py;." `
#            --add-data "requirements.txt;." `
#            --add-data "plan.py;." `
#            --add-data "perforation_correct_gnkt_frez.py;." `
#            --add-data "perforation_correct.py;." `
#            --add-data "open_pz.py;." `
#            --add-data "krs.py;." `
#            --add-data "H2S.py;." `
#            --add-data "gnkt_opz.py;." `
#            --add-data "gnkt_after_grp.py;." `
#            --add-data "find.py;." `
#            --add-data "data_correct_position_people.py;." `
#            --add-data "data_correct.py;." `
#            --add-data "cdng.py;." `
#            --add-data "category_correct.py;." `
#            --add-data "build_script.py;." `
#            --add-data "block_name.py;." `
#            --add-data "application_pvr.py;." `
#            --add-data "application_gis.py;." `
#            main.py
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: ZIMA
#          path: dist/*